#!/usr/bin/env python

import sys
import os
import subprocess
import getopt

class BuildOptions:
	pass

opts=BuildOptions()

def parse_opts():
	o,a=getopt.getopt(sys.argv[1:], "f")
	opts.force=('-f','') in o

	opts.flavor=('.'+a[0]) if a else ''
	return opts


DEBUG='BUILD_DEBUG' in os.environ

def debug(s):
	if DEBUG: print(s)

def normalized_path(dir,name):
	return os.path.normpath(os.path.join(dir,name))

class Source:
	def __init__(_,dir,name,is_out=False):
		_.dir=dir
		_.name=name
		_.path=normalized_path(dir,name)
		_.deps=[]
		_.changed=0
		_.time=None
		_.out=None
		try:
			_.time=os.stat(_.path).st_mtime
		except OSError as e:
			if (not is_out) or e.errno!=2: raise

	def __repr__(_):
		return 'S({},{},{},{})'.format(_.path,_.time,_.deps,_.out)

def list_sources(dirs):
	sources={}
	build=[]
	for dir in dirs:
		for x in os.listdir(dir):
			if x.endswith('.c'):
				src=Source(dir,x)
				src.out=Source(os.path.join('o',dir),x+'.o'+opts.flavor,is_out=True)
				sources[src.path]=src
				build.append(src)
			elif x.endswith('.h'):
				src=Source(dir,x)
				sources[src.path]=src
	return sources,build

def compute_dependencies(s):
	for x in s.values():
		for l in open(x.path):
			if l.startswith('#include'):
				h=l.split()[1]
				if h.startswith('"'):
					h=h.split('"')[1]

					try:
						dep=s[normalized_path(x.dir,h)]
						x.deps.append(dep)
					except KeyError as e:
						print('error in',x.path)
						raise

def is_stale_src(s):
	if s.out.time is None:
		return True
	if s.time > s.out.time:
		return True
	return False
	

def is_stale_dep(s,t):
	for x in s.deps:
		if x.time > t:
			return True
		if is_stale_dep(x,t): return True
	return False

def compile(s):
	args=[s.path,s.out.path]
	return 0==subprocess.call(['./c'+opts.flavor]+args)
	

def link(s):
	args=[x.out.path for x in s]
	subprocess.call(['./l'+opts.flavor]+args)

def get_dirs():
	return open('dirs').read().split()


def main():
	opts=parse_opts()

	dirs=get_dirs()

	sources,build=list_sources(dirs)
	compute_dependencies(sources)

	debug("SOURCES: {}".format(sources))

	maylink=False
	errors=False
	for x in build:
		if opts.force:
			if not compile(x): errors=True
			maylink=True
		elif is_stale_src(x):
			if not compile(x): errors=True
			maylink=True
		elif is_stale_dep(x,x.out.time):
			if not compile(x): errors=True
			maylink=True

	if maylink and not errors:
		link(build)

	if errors:
		print("errors")
		sys.exit(1)
	print("done")
		


if __name__=='__main__':
	main()


